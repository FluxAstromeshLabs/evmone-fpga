// evmone: Fast Ethereum Virtual Machine implementation
// Copyright 2020 The evmone Authors.
// SPDX-License-Identifier: Apache-2.0
#pragma once

#include "evmc/instructions.h"
#include <array>

namespace instr
{
/// EIP-2929 constants (https://eips.ethereum.org/EIPS/eip-2929).
/// @{
constexpr auto cold_sload_cost = 2100;
constexpr auto cold_account_access_cost = 2600;
constexpr auto warm_storage_read_cost = 100;

/// Additional cold account access cost.
///
/// The warm access cost is unconditionally applied for every account access instruction.
/// If the access turns out to be cold, this cost must be applied additionally.
constexpr auto additional_cold_account_access_cost =
    cold_account_access_cost - warm_storage_read_cost;
/// @}

/// The EVM instruction traits.
struct Traits
{
    /// The instruction name;
    const char* name = nullptr;

    /// The number of stack items the instruction accesses during execution.
    int8_t stack_height_required = 0;

    /// The stack height change caused by the instruction execution. Can be negative.
    int8_t stack_height_change = 0;
	
	// Const initializer
	constexpr Traits(const char* name, int8_t sr, int8_t sc) : name(name), stack_height_required(sr), stack_height_change(sc) {};
};

/// The global, EVM revision independent, table of traits of all known EVM instructions.
constexpr std::array<Traits, 256> traits = {{
	Traits("STOP", 0, 0),
	Traits("ADD", 2, -1),
	Traits("MUL", 2, -1),
	Traits("SUB", 2, -1),
	Traits("DIV", 2, -1),
	Traits("SDIV", 2, -1),
	Traits("MOD", 2, -1),
	Traits("SMOD", 2, -1),
	Traits("ADDMOD", 3, -2),
	Traits("MULMOD", 3, -2),
	Traits("EXP", 2, -1),
	Traits("SIGNEXTEND", 2, -1),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("LT", 2, -1),
	Traits("GT", 2, -1),
	Traits("SLT", 2, -1),
	Traits("SGT", 2, -1),
	Traits("EQ", 2, -1),
	Traits("ISZERO", 1, 0),
	Traits("AND", 2, -1),
	Traits("OR", 2, -1),
	Traits("XOR", 2, -1),
	Traits("NOT", 1, 0),
	Traits("BYTE", 2, -1),
	Traits("SHL", 2, -1),
	Traits("SHR", 2, -1),
	Traits("SAR", 2, -1),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("KECCAK256", 2, -1),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("ADDRESS", 0, 1),
	Traits("BALANCE", 1, 0),
	Traits("ORIGIN", 0, 1),
	Traits("CALLER", 0, 1),
	Traits("CALLVALUE", 0, 1),
	Traits("CALLDATALOAD", 1, 0),
	Traits("CALLDATASIZE", 0, 1),
	Traits("CALLDATACOPY", 3, -3),
	Traits("CODESIZE", 0, 1),
	Traits("CODECOPY", 3, -3),
	Traits("GASPRICE", 0, 1),
	Traits("EXTCODESIZE", 1, 0),
	Traits("EXTCODECOPY", 4, -4),
	Traits("RETURNDATASIZE", 0, 1),
	Traits("RETURNDATACOPY", 3, -3),
	Traits("EXTCODEHASH", 1, 0),
	Traits("BLOCKHASH", 1, 0),
	Traits("COINBASE", 0, 1),
	Traits("TIMESTAMP", 0, 1),
	Traits("NUMBER", 0, 1),
	Traits("DIFFICULTY", 0, 1),
	Traits("GASLIMIT", 0, 1),
	Traits("CHAINID", 0, 1),
	Traits("SELFBALANCE", 0, 1),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("POP", 1, -1),
	Traits("MLOAD", 1, 0),
	Traits("MSTORE", 2, -2),
	Traits("MSTORE8", 2, -2),
	Traits("SLOAD", 1, 0),
	Traits("SSTORE", 2, -2),
	Traits("JUMP", 1, -1),
	Traits("JUMPI", 2, -2),
	Traits("PC", 0, 1),
	Traits("MSIZE", 0, 1),
	Traits("GAS", 0, 1),
	Traits("JUMPDEST", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("PUSH1", 0, 1),
	Traits("PUSH2", 0, 1),
	Traits("PUSH3", 0, 1),
	Traits("PUSH4", 0, 1),
	Traits("PUSH5", 0, 1),
	Traits("PUSH6", 0, 1),
	Traits("PUSH7", 0, 1),
	Traits("PUSH8", 0, 1),
	Traits("PUSH9", 0, 1),
	Traits("PUSH10", 0, 1),
	Traits("PUSH11", 0, 1),
	Traits("PUSH12", 0, 1),
	Traits("PUSH13", 0, 1),
	Traits("PUSH14", 0, 1),
	Traits("PUSH15", 0, 1),
	Traits("PUSH16", 0, 1),
	Traits("PUSH17", 0, 1),
	Traits("PUSH18", 0, 1),
	Traits("PUSH19", 0, 1),
	Traits("PUSH20", 0, 1),
	Traits("PUSH21", 0, 1),
	Traits("PUSH22", 0, 1),
	Traits("PUSH23", 0, 1),
	Traits("PUSH24", 0, 1),
	Traits("PUSH25", 0, 1),
	Traits("PUSH26", 0, 1),
	Traits("PUSH27", 0, 1),
	Traits("PUSH28", 0, 1),
	Traits("PUSH29", 0, 1),
	Traits("PUSH30", 0, 1),
	Traits("PUSH31", 0, 1),
	Traits("PUSH32", 0, 1),
	Traits("DUP1", 1, 1),
	Traits("DUP2", 2, 1),
	Traits("DUP3", 3, 1),
	Traits("DUP4", 4, 1),
	Traits("DUP5", 5, 1),
	Traits("DUP6", 6, 1),
	Traits("DUP7", 7, 1),
	Traits("DUP8", 8, 1),
	Traits("DUP9", 9, 1),
	Traits("DUP10", 10, 1),
	Traits("DUP11", 11, 1),
	Traits("DUP12", 12, 1),
	Traits("DUP13", 13, 1),
	Traits("DUP14", 14, 1),
	Traits("DUP15", 15, 1),
	Traits("DUP16", 16, 1),
	Traits("SWAP1", 2, 0),
	Traits("SWAP2", 3, 0),
	Traits("SWAP3", 4, 0),
	Traits("SWAP4", 5, 0),
	Traits("SWAP5", 6, 0),
	Traits("SWAP6", 7, 0),
	Traits("SWAP7", 8, 0),
	Traits("SWAP8", 9, 0),
	Traits("SWAP9", 10, 0),
	Traits("SWAP10", 11, 0),
	Traits("SWAP11", 12, 0),
	Traits("SWAP12", 13, 0),
	Traits("SWAP13", 14, 0),
	Traits("SWAP14", 15, 0),
	Traits("SWAP15", 16, 0),
	Traits("SWAP16", 17, 0),
	Traits("LOG0", 2, -2),
	Traits("LOG1", 3, -3),
	Traits("LOG2", 4, -4),
	Traits("LOG3", 5, -5),
	Traits("LOG4", 6, -6),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("CREATE", 3, -2),
	Traits("CALL", 7, -6),
	Traits("CALLCODE", 7, -6),
	Traits("RETURN", 2, -2),
	Traits("DELEGATECALL", 6, -5),
	Traits("CREATE2", 4, -3),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("STATICCALL", 6, -5),
	Traits("", 0, 0),
	Traits("", 0, 0),
	Traits("REVERT", 2, -2),
	Traits("INVALID", 0, 0),
	Traits("SELFDESTRUCT", 1, -1)
}};

/* []() noexcept {
	std::array<Traits, 256> table{};

	table[OP_STOP] = {"STOP", 0, 0};
	table[OP_ADD] = {"ADD", 2, -1};
	table[OP_MUL] = {"MUL", 2, -1};
	table[OP_SUB] = {"SUB", 2, -1};
	table[OP_DIV] = {"DIV", 2, -1};
	table[OP_SDIV] = {"SDIV", 2, -1};
	table[OP_MOD] = {"MOD", 2, -1};
	table[OP_SMOD] = {"SMOD", 2, -1};
	table[OP_ADDMOD] = {"ADDMOD", 3, -2};
	table[OP_MULMOD] = {"MULMOD", 3, -2};
	table[OP_EXP] = {"EXP", 2, -1};
	table[OP_SIGNEXTEND] = {"SIGNEXTEND", 2, -1};

	table[OP_LT] = {"LT", 2, -1};
	table[OP_GT] = {"GT", 2, -1};
	table[OP_SLT] = {"SLT", 2, -1};
	table[OP_SGT] = {"SGT", 2, -1};
	table[OP_EQ] = {"EQ", 2, -1};
	table[OP_ISZERO] = {"ISZERO", 1, 0};
	table[OP_AND] = {"AND", 2, -1};
	table[OP_OR] = {"OR", 2, -1};
	table[OP_XOR] = {"XOR", 2, -1};
	table[OP_NOT] = {"NOT", 1, 0};
	table[OP_BYTE] = {"BYTE", 2, -1};
	table[OP_SHL] = {"SHL", 2, -1};
	table[OP_SHR] = {"SHR", 2, -1};
	table[OP_SAR] = {"SAR", 2, -1};

	table[OP_KECCAK256] = {"KECCAK256", 2, -1};

	table[OP_ADDRESS] = {"ADDRESS", 0, 1};
	table[OP_BALANCE] = {"BALANCE", 1, 0};
	table[OP_ORIGIN] = {"ORIGIN", 0, 1};
	table[OP_CALLER] = {"CALLER", 0, 1};
	table[OP_CALLVALUE] = {"CALLVALUE", 0, 1};
	table[OP_CALLDATALOAD] = {"CALLDATALOAD", 1, 0};
	table[OP_CALLDATASIZE] = {"CALLDATASIZE", 0, 1};
	table[OP_CALLDATACOPY] = {"CALLDATACOPY", 3, -3};
	table[OP_CODESIZE] = {"CODESIZE", 0, 1};
	table[OP_CODECOPY] = {"CODECOPY", 3, -3};
	table[OP_GASPRICE] = {"GASPRICE", 0, 1};
	table[OP_EXTCODESIZE] = {"EXTCODESIZE", 1, 0};
	table[OP_EXTCODECOPY] = {"EXTCODECOPY", 4, -4};
	table[OP_RETURNDATASIZE] = {"RETURNDATASIZE", 0, 1};
	table[OP_RETURNDATACOPY] = {"RETURNDATACOPY", 3, -3};
	table[OP_EXTCODEHASH] = {"EXTCODEHASH", 1, 0};

	table[OP_BLOCKHASH] = {"BLOCKHASH", 1, 0};
	table[OP_COINBASE] = {"COINBASE", 0, 1};
	table[OP_TIMESTAMP] = {"TIMESTAMP", 0, 1};
	table[OP_NUMBER] = {"NUMBER", 0, 1};
	table[OP_DIFFICULTY] = {"DIFFICULTY", 0, 1};
	table[OP_GASLIMIT] = {"GASLIMIT", 0, 1};
	table[OP_CHAINID] = {"CHAINID", 0, 1};
	table[OP_SELFBALANCE] = {"SELFBALANCE", 0, 1};

	table[OP_POP] = {"POP", 1, -1};
	table[OP_MLOAD] = {"MLOAD", 1, 0};
	table[OP_MSTORE] = {"MSTORE", 2, -2};
	table[OP_MSTORE8] = {"MSTORE8", 2, -2};
	table[OP_SLOAD] = {"SLOAD", 1, 0};
	table[OP_SSTORE] = {"SSTORE", 2, -2};
	table[OP_JUMP] = {"JUMP", 1, -1};
	table[OP_JUMPI] = {"JUMPI", 2, -2};
	table[OP_PC] = {"PC", 0, 1};
	table[OP_MSIZE] = {"MSIZE", 0, 1};
	table[OP_GAS] = {"GAS", 0, 1};
	table[OP_JUMPDEST] = {"JUMPDEST", 0, 0};

	table[OP_PUSH1] = {"PUSH1", 0, 1};
	table[OP_PUSH2] = {"PUSH2", 0, 1};
	table[OP_PUSH3] = {"PUSH3", 0, 1};
	table[OP_PUSH4] = {"PUSH4", 0, 1};
	table[OP_PUSH5] = {"PUSH5", 0, 1};
	table[OP_PUSH6] = {"PUSH6", 0, 1};
	table[OP_PUSH7] = {"PUSH7", 0, 1};
	table[OP_PUSH8] = {"PUSH8", 0, 1};
	table[OP_PUSH9] = {"PUSH9", 0, 1};
	table[OP_PUSH10] = {"PUSH10", 0, 1};
	table[OP_PUSH11] = {"PUSH11", 0, 1};
	table[OP_PUSH12] = {"PUSH12", 0, 1};
	table[OP_PUSH13] = {"PUSH13", 0, 1};
	table[OP_PUSH14] = {"PUSH14", 0, 1};
	table[OP_PUSH15] = {"PUSH15", 0, 1};
	table[OP_PUSH16] = {"PUSH16", 0, 1};
	table[OP_PUSH17] = {"PUSH17", 0, 1};
	table[OP_PUSH18] = {"PUSH18", 0, 1};
	table[OP_PUSH19] = {"PUSH19", 0, 1};
	table[OP_PUSH20] = {"PUSH20", 0, 1};
	table[OP_PUSH21] = {"PUSH21", 0, 1};
	table[OP_PUSH22] = {"PUSH22", 0, 1};
	table[OP_PUSH23] = {"PUSH23", 0, 1};
	table[OP_PUSH24] = {"PUSH24", 0, 1};
	table[OP_PUSH25] = {"PUSH25", 0, 1};
	table[OP_PUSH26] = {"PUSH26", 0, 1};
	table[OP_PUSH27] = {"PUSH27", 0, 1};
	table[OP_PUSH28] = {"PUSH28", 0, 1};
	table[OP_PUSH29] = {"PUSH29", 0, 1};
	table[OP_PUSH30] = {"PUSH30", 0, 1};
	table[OP_PUSH31] = {"PUSH31", 0, 1};
	table[OP_PUSH32] = {"PUSH32", 0, 1};

	table[OP_DUP1] = {"DUP1", 1, 1};
	table[OP_DUP2] = {"DUP2", 2, 1};
	table[OP_DUP3] = {"DUP3", 3, 1};
	table[OP_DUP4] = {"DUP4", 4, 1};
	table[OP_DUP5] = {"DUP5", 5, 1};
	table[OP_DUP6] = {"DUP6", 6, 1};
	table[OP_DUP7] = {"DUP7", 7, 1};
	table[OP_DUP8] = {"DUP8", 8, 1};
	table[OP_DUP9] = {"DUP9", 9, 1};
	table[OP_DUP10] = {"DUP10", 10, 1};
	table[OP_DUP11] = {"DUP11", 11, 1};
	table[OP_DUP12] = {"DUP12", 12, 1};
	table[OP_DUP13] = {"DUP13", 13, 1};
	table[OP_DUP14] = {"DUP14", 14, 1};
	table[OP_DUP15] = {"DUP15", 15, 1};
	table[OP_DUP16] = {"DUP16", 16, 1};

	table[OP_SWAP1] = {"SWAP1", 2, 0};
	table[OP_SWAP2] = {"SWAP2", 3, 0};
	table[OP_SWAP3] = {"SWAP3", 4, 0};
	table[OP_SWAP4] = {"SWAP4", 5, 0};
	table[OP_SWAP5] = {"SWAP5", 6, 0};
	table[OP_SWAP6] = {"SWAP6", 7, 0};
	table[OP_SWAP7] = {"SWAP7", 8, 0};
	table[OP_SWAP8] = {"SWAP8", 9, 0};
	table[OP_SWAP9] = {"SWAP9", 10, 0};
	table[OP_SWAP10] = {"SWAP10", 11, 0};
	table[OP_SWAP11] = {"SWAP11", 12, 0};
	table[OP_SWAP12] = {"SWAP12", 13, 0};
	table[OP_SWAP13] = {"SWAP13", 14, 0};
	table[OP_SWAP14] = {"SWAP14", 15, 0};
	table[OP_SWAP15] = {"SWAP15", 16, 0};
	table[OP_SWAP16] = {"SWAP16", 17, 0};

	table[OP_LOG0] = {"LOG0", 2, -2};
	table[OP_LOG1] = {"LOG1", 3, -3};
	table[OP_LOG2] = {"LOG2", 4, -4};
	table[OP_LOG3] = {"LOG3", 5, -5};
	table[OP_LOG4] = {"LOG4", 6, -6};

	table[OP_CREATE] = {"CREATE", 3, -2};
	table[OP_CALL] = {"CALL", 7, -6};
	table[OP_CALLCODE] = {"CALLCODE", 7, -6};
	table[OP_RETURN] = {"RETURN", 2, -2};
	table[OP_DELEGATECALL] = {"DELEGATECALL", 6, -5};
	table[OP_CREATE2] = {"CREATE2", 4, -3};
	table[OP_STATICCALL] = {"STATICCALL", 6, -5};
	table[OP_REVERT] = {"REVERT", 2, -2};
	table[OP_INVALID] = {"INVALID", 0, 0};
	table[OP_SELFDESTRUCT] = {"SELFDESTRUCT", 1, -1};

	return table;

}();

*/

/// The special gas cost value marking an EVM instruction as "undefined".
constexpr int16_t undefined = -1;

/// The EVM revision specific table of EVM instructions gas costs. For instructions undefined
/// in given EVM revision, the value is instr::undefined.
template <evmc_revision>
constexpr auto gas_costs = nullptr;


template <>
constexpr std::array<int16_t, 256> gas_costs<EVMC_FRONTIER> = {
	0,
	3,
	5,
	3,
	5,
	5,
	5,
	5,
	8,
	8,
	10,
	5,
	-1,
	-1,
	-1,
	-1,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	-1,
	-1,
	-1,
	-1,
	-1,
	30,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	2,
	20,
	2,
	2,
	2,
	3,
	2,
	3,
	2,
	3,
	2,
	20,
	20,
	-1,
	-1,
	-1,
	20,
	2,
	2,
	2,
	2,
	2,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	2,
	3,
	3,
	3,
	50,
	0,
	8,
	10,
	2,
	2,
	2,
	1,
	-1,
	-1,
	-1,
	-1,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	375,
	750,
	1125,
	1500,
	1875,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	32000,
	40,
	40,
	0,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	0,
	0,
};
/* []() noexcept {
    std::array<int16_t, 256> table{};
    for (auto& t : table)
        t = undefined;

    table[OP_STOP] = 0;
    table[OP_ADD] = 3;
    table[OP_MUL] = 5;
    table[OP_SUB] = 3;
    table[OP_DIV] = 5;
    table[OP_SDIV] = 5;
    table[OP_MOD] = 5;
    table[OP_SMOD] = 5;
    table[OP_ADDMOD] = 8;
    table[OP_MULMOD] = 8;
    table[OP_EXP] = 10;
    table[OP_SIGNEXTEND] = 5;
    table[OP_LT] = 3;
    table[OP_GT] = 3;
    table[OP_SLT] = 3;
    table[OP_SGT] = 3;
    table[OP_EQ] = 3;
    table[OP_ISZERO] = 3;
    table[OP_AND] = 3;
    table[OP_OR] = 3;
    table[OP_XOR] = 3;
    table[OP_NOT] = 3;
    table[OP_BYTE] = 3;
    table[OP_KECCAK256] = 30;
    table[OP_ADDRESS] = 2;
    table[OP_BALANCE] = 20;
    table[OP_ORIGIN] = 2;
    table[OP_CALLER] = 2;
    table[OP_CALLVALUE] = 2;
    table[OP_CALLDATALOAD] = 3;
    table[OP_CALLDATASIZE] = 2;
    table[OP_CALLDATACOPY] = 3;
    table[OP_CODESIZE] = 2;
    table[OP_CODECOPY] = 3;
    table[OP_GASPRICE] = 2;
    table[OP_EXTCODESIZE] = 20;
    table[OP_EXTCODECOPY] = 20;
    table[OP_BLOCKHASH] = 20;
    table[OP_COINBASE] = 2;
    table[OP_TIMESTAMP] = 2;
    table[OP_NUMBER] = 2;
    table[OP_DIFFICULTY] = 2;
    table[OP_GASLIMIT] = 2;
    table[OP_POP] = 2;
    table[OP_MLOAD] = 3;
    table[OP_MSTORE] = 3;
    table[OP_MSTORE8] = 3;
    table[OP_SLOAD] = 50;
    table[OP_SSTORE] = 0;
    table[OP_JUMP] = 8;
    table[OP_JUMPI] = 10;
    table[OP_PC] = 2;
    table[OP_MSIZE] = 2;

    table[OP_GAS] = 2;
    table[OP_JUMPDEST] = 1;

    for (auto op = size_t{OP_PUSH1}; op <= OP_PUSH32; ++op)
        table[op] = 3;

    for (auto op = size_t{OP_DUP1}; op <= OP_DUP16; ++op)
        table[op] = 3;

    for (auto op = size_t{OP_SWAP1}; op <= OP_SWAP16; ++op)
        table[op] = 3;

    for (auto op = size_t{OP_LOG0}; op <= OP_LOG4; ++op)
        table[op] = static_cast<int16_t>((op - OP_LOG0 + 1) * 375);

    table[OP_CREATE] = 32000;
    table[OP_CALL] = 40;
    table[OP_CALLCODE] = 40;
    table[OP_RETURN] = 0;
    table[OP_INVALID] = 0;
    table[OP_SELFDESTRUCT] = 0;
    return table;
}();

*/

template <>
constexpr std::array<int16_t, 256> gas_costs<EVMC_HOMESTEAD> = {
	0,
	3,
	5,
	3,
	5,
	5,
	5,
	5,
	8,
	8,
	10,
	5,
	-1,
	-1,
	-1,
	-1,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	-1,
	-1,
	-1,
	-1,
	-1,
	30,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	2,
	20,
	2,
	2,
	2,
	3,
	2,
	3,
	2,
	3,
	2,
	20,
	20,
	-1,
	-1,
	-1,
	20,
	2,
	2,
	2,
	2,
	2,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	2,
	3,
	3,
	3,
	50,
	0,
	8,
	10,
	2,
	2,
	2,
	1,
	-1,
	-1,
	-1,
	-1,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	375,
	750,
	1125,
	1500,
	1875,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	32000,
	40,
	40,
	0,
	40,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	0,
	0,
};
/* []() noexcept {
    auto table = gas_costs<EVMC_FRONTIER>;
    table[OP_DELEGATECALL] = 40;
    return table;
}(); */

template <>
constexpr std::array<int16_t, 256> gas_costs<EVMC_TANGERINE_WHISTLE> = {
	0,
	3,
	5,
	3,
	5,
	5,
	5,
	5,
	8,
	8,
	10,
	5,
	-1,
	-1,
	-1,
	-1,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	-1,
	-1,
	-1,
	-1,
	-1,
	30,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	2,
	400,
	2,
	2,
	2,
	3,
	2,
	3,
	2,
	3,
	2,
	700,
	700,
	-1,
	-1,
	-1,
	20,
	2,
	2,
	2,
	2,
	2,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	2,
	3,
	3,
	3,
	200,
	0,
	8,
	10,
	2,
	2,
	2,
	1,
	-1,
	-1,
	-1,
	-1,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	375,
	750,
	1125,
	1500,
	1875,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	32000,
	700,
	700,
	0,
	700,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	0,
	5000,
};
/* []() noexcept {
    auto table = gas_costs<EVMC_HOMESTEAD>;
    table[OP_BALANCE] = 400;
    table[OP_EXTCODESIZE] = 700;
    table[OP_EXTCODECOPY] = 700;
    table[OP_SLOAD] = 200;
    table[OP_CALL] = 700;
    table[OP_CALLCODE] = 700;
    table[OP_DELEGATECALL] = 700;
    table[OP_SELFDESTRUCT] = 5000;
    return table;
}();
 */
template <>
constexpr auto gas_costs<EVMC_SPURIOUS_DRAGON> = gas_costs<EVMC_TANGERINE_WHISTLE>;

template <>
constexpr std::array<int16_t, 256> gas_costs<EVMC_BYZANTIUM> = {
	0,
	3,
	5,
	3,
	5,
	5,
	5,
	5,
	8,
	8,
	10,
	5,
	-1,
	-1,
	-1,
	-1,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	-1,
	-1,
	-1,
	-1,
	-1,
	30,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	2,
	400,
	2,
	2,
	2,
	3,
	2,
	3,
	2,
	3,
	2,
	700,
	700,
	2,
	3,
	-1,
	20,
	2,
	2,
	2,
	2,
	2,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	2,
	3,
	3,
	3,
	200,
	0,
	8,
	10,
	2,
	2,
	2,
	1,
	-1,
	-1,
	-1,
	-1,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	375,
	750,
	1125,
	1500,
	1875,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	32000,
	700,
	700,
	0,
	700,
	-1,
	-1,
	-1,
	-1,
	-1,
	700,
	-1,
	-1,
	0,
	0,
	5000,
};
/* []() noexcept {
    auto table = gas_costs<EVMC_SPURIOUS_DRAGON>;
    table[OP_RETURNDATASIZE] = 2;
    table[OP_RETURNDATACOPY] = 3;
    table[OP_STATICCALL] = 700;
    table[OP_REVERT] = 0;
    return table;
}(); */

template <>
constexpr std::array<int16_t, 256> gas_costs<EVMC_CONSTANTINOPLE> = {
		0,
	3,
	5,
	3,
	5,
	5,
	5,
	5,
	8,
	8,
	10,
	5,
	-1,
	-1,
	-1,
	-1,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	-1,
	-1,
	30,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	2,
	400,
	2,
	2,
	2,
	3,
	2,
	3,
	2,
	3,
	2,
	700,
	700,
	2,
	3,
	400,
	20,
	2,
	2,
	2,
	2,
	2,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	2,
	3,
	3,
	3,
	200,
	0,
	8,
	10,
	2,
	2,
	2,
	1,
	-1,
	-1,
	-1,
	-1,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	375,
	750,
	1125,
	1500,
	1875,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	32000,
	700,
	700,
	0,
	700,
	32000,
	-1,
	-1,
	-1,
	-1,
	700,
	-1,
	-1,
	0,
	0,
	5000
};
/* []() noexcept {
    auto table = gas_costs<EVMC_BYZANTIUM>;
    table[OP_SHL] = 3;
    table[OP_SHR] = 3;
    table[OP_SAR] = 3;
    table[OP_EXTCODEHASH] = 400;
    table[OP_CREATE2] = 32000;
    return table;
}();
 */
template <>
constexpr auto gas_costs<EVMC_PETERSBURG> = gas_costs<EVMC_CONSTANTINOPLE>;

template <>
constexpr std::array<int16_t, 256> gas_costs<EVMC_ISTANBUL> = {
	0,
	3,
	5,
	3,
	5,
	5,
	5,
	5,
	8,
	8,
	10,
	5,
	-1,
	-1,
	-1,
	-1,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	-1,
	-1,
	30,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	2,
	700,
	2,
	2,
	2,
	3,
	2,
	3,
	2,
	3,
	2,
	700,
	700,
	2,
	3,
	700,
	20,
	2,
	2,
	2,
	2,
	2,
	2,
	5,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	2,
	3,
	3,
	3,
	800,
	0,
	8,
	10,
	2,
	2,
	2,
	1,
	-1,
	-1,
	-1,
	-1,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	375,
	750,
	1125,
	1500,
	1875,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	32000,
	700,
	700,
	0,
	700,
	32000,
	-1,
	-1,
	-1,
	-1,
	700,
	-1,
	-1,
	0,
	0,
	5000
};
/* []() noexcept {
    auto table = gas_costs<EVMC_CONSTANTINOPLE>;
    table[OP_BALANCE] = 700;
    table[OP_CHAINID] = 2;
    table[OP_EXTCODEHASH] = 700;
    table[OP_SELFBALANCE] = 5;
    table[OP_SLOAD] = 800;
    return table;
}();
 */
template <>
constexpr std::array<int16_t, 256> gas_costs<EVMC_BERLIN> = {
	0,
	3,
	5,
	3,
	5,
	5,
	5,
	5,
	8,
	8,
	10,
	5,
	-1,
	-1,
	-1,
	-1,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	-1,
	-1,
	30,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	2,
	100,
	2,
	2,
	2,
	3,
	2,
	3,
	2,
	3,
	2,
	100,
	100,
	2,
	3,
	100,
	20,
	2,
	2,
	2,
	2,
	2,
	2,
	5,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	2,
	3,
	3,
	3,
	100,
	0,
	8,
	10,
	2,
	2,
	2,
	1,
	-1,
	-1,
	-1,
	-1,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	375,
	750,
	1125,
	1500,
	1875,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	-1,
	32000,
	100,
	100,
	0,
	100,
	32000,
	-1,
	-1,
	-1,
	-1,
	100,
	-1,
	-1,
	0,
	0,
	5000
};

/* []() noexcept {
    auto table = gas_costs<EVMC_ISTANBUL>;
    table[OP_EXTCODESIZE] = warm_storage_read_cost;
    table[OP_EXTCODECOPY] = warm_storage_read_cost;
    table[OP_EXTCODEHASH] = warm_storage_read_cost;
    table[OP_BALANCE] 	  = warm_storage_read_cost;
    table[OP_CALL] 		  = warm_storage_read_cost;
    table[OP_CALLCODE] 	  = warm_storage_read_cost;
    table[OP_DELEGATECALL]= warm_storage_read_cost;
    table[OP_STATICCALL]  = warm_storage_read_cost;
    table[OP_SLOAD] 	  = warm_storage_read_cost;
    return table;
}();
*/ 
template <>
constexpr std::array<int16_t, 256> gas_costs<EVMC_LONDON> = gas_costs<EVMC_BERLIN>;
}  // namespace evmone::instr
